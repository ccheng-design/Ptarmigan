using System;
using SD = System.Drawing;

using Rhino.Geometry;

using Grasshopper.Kernel;

namespace RhinoCodePlatform.Rhino3D.Projects.Plugin.GH
{
  public sealed class ProjectComponent_214b3c8a : ProjectComponent_Base
  {
    static readonly string s_scriptData = "";
    static readonly string s_scriptIconData = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAA5VJREFUSEvdlVloU1kYx29y95u7JPf2Nr3N0ia2xtFpba1NE1MTlWma1GVciOioFKoUt5jEavskUYbB7UELvnSxIC4MzviqT+KDGwiidkRfRH1yGyjooPiix++ktxCcZqbx0R/84fu+853znXu2S3yX8CRJdtE0Pc/0v0YlSGYVx3E1pl8eFpI81hZtRLpR8VFZPqulbjDBVo6sdBJDLXTV6YTO2vjL0fgCxEu2F5BOT/YqB5L6fUf/WlQ/txZxc/Tu4gL6sVgVY+PvD/y2Gcmq8gmyhclO5cCyvogg3hFI8jp4Y6A6EImbMBRFBWESY/wcfbf7Ylw1w+UxUVt/Ime3zwfTAjoKwuv9r8HcI3HVOdq11HRnzt819ScjDQ0OMHeBYiAPF/bcE9LB91ImdIrIxyich6m8sNLpPb8c584cXOAfv78STLkQkJhVruyiN+duHUSNhzrecq3VYXVb0C3tCeakzKJA9VjcU8ibKbjAK5/PCaYCiuCYmgsd9u5f/EHbG/6T4DivuK3p5fazPah6X/s7Ip9ijJFkh9ThT8Im5RiGqcd9SlJUAFMB4kAWutnVCAtWWB4x3faw/9Iu5IICNfkYbpdU3fF4w9Y4nDD5Ifg8zpuWrwrYQPqkSTCgdSBSyywM2LLBXx3ZUOELAVlzOh5t3t6JZE0eB790AXyKzD2YogE0tbG4SBtIKnjF0PR82q0MEgzzgxmZBp5wJUT5psEKvWYEg7+geEBcfNqnQr+WEk2zBCR1rnv3CuQPeBHMqPg9Sun5WJVpY1g2WtNj2xMcljJtSRygKC7KOuU/4DLiLywBSQ0n1kSQq9ZAMEYtDuFN1LLh276B6GctGxos5AFiuvX1kSt9yLW/fYJd7PVVGNrT3r2rkaLZn0Az3rtp4aw03S01uZL+oZ/wMbWI6SZ99sEOdOZGHhl9kQdGb0vhDYKZj28a2YSc+yLPxfYqXalQ/or/HEKiXbyLx8E5/0nd2YRsnO7aiG+unAkdt6Vbn9mzoW6zmZBzIdXeF96ipoPu6tHOgJKau8zKslsJQTDMlJmh9TQPwNqNWgnrFjNUgOK4GCzpBaHZ6HdfTJU+lv+DhRP4q5kD65Fvtue9GPG04yfcO/6Lg7CSb46P7kSSQ5mAvPLeo2IYnhteGPkRwU197kgGGnAB962UCj+nG0uSrYgXBXxz2cnsb8NGkmwn/leY/hQKXKoVgiAUH9/vCoL4Ajisy27977KjAAAAAElFTkSuQmCC";

    public override Guid ComponentGuid { get; } = new Guid("214b3c8a-9412-41dd-bca3-44d3d7ff8c45");

    public override GH_Exposure Exposure { get; } = GH_Exposure.primary;

    public override bool Obsolete { get; } = false;

    public ProjectComponent_214b3c8a() : base(s_scriptData, s_scriptIconData,
        name: "JM_Convex_Hull",
        nickname: "JM_CH",
        description: "Convex hull using the Jarvis March Algorithm(Gift Wrapping Algorithm)",
        category: "UAP",
        subCategory: "Curve"
        )
    {
    }

    protected override void RegisterInputParams(GH_InputParamManager _) { }

    protected override void RegisterOutputParams(GH_OutputParamManager _) { }

    protected override void BeforeSolveInstance()
    {
      if (m_script is null) return;
      m_script.BeforeSolve(this);
    }

    protected override void SolveInstance(IGH_DataAccess DA)
    {
      if (m_script is null) return;
      m_script.Solve(this, DA);
    }

    protected override void AfterSolveInstance()
    {
      if (m_script is null) return;
      m_script.AfterSolve(this);
    }

    public override void RemovedFromDocument(GH_Document document)
    {
      ProjectComponentPlugin.DisposeScript(this, m_script);
      base.RemovedFromDocument(document);
    }

    public override BoundingBox ClippingBox
    {
      get
      {
        if (m_script is null) return BoundingBox.Empty;
        return m_script.GetClipBox(this);
      }
    }

    public override void DrawViewportWires(IGH_PreviewArgs args)
    {
      if (m_script is null) return;
      m_script.DrawWires(this, args);
    }

    public override void DrawViewportMeshes(IGH_PreviewArgs args)
    {
      if (m_script is null) return;
      m_script.DrawMeshes(this, args);
    }
  }
}
