using System;
using SD = System.Drawing;

using Rhino.Geometry;

using Grasshopper.Kernel;

namespace RhinoCodePlatform.Rhino3D.Projects.Plugin.GH
{
  public sealed class ProjectComponent_6d927349 : ProjectComponent_Base
  {
    static readonly string s_scriptData = "";
    static readonly string s_scriptIconData = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAABT1JREFUSEvNlWtMU2cYx4UWiopIq8hoT8+1B21LkSEo5aKlUFAp2A3UaTNwYzqjIENFYQwV0U2UCMiWqTFzsmwKeMELU0RBN7xnmUsWdfESl3kbH4xCq0zQ/15pP8xsQ51f9ktOcnLO+/6e5zznec4Z8J9YvtxTKZerpVJpFEVRKnLF03XjFdGoVBRD01WUMqjD20sKlVwGY4gGWo7pYNTqao1GQ7mXvjwMw0zWiWxHkX0M2EBfFGfweLItDg+rIvFjXgg+TBChZZnfOZqzure8OBzHxYVpBWdLZQJaN0yAqB6Ce01WPNqbjO4vYuFcFw5HgRYHpooIE1kHScbk3vp8yGPLNCxzeVeZCTibgcV2DXLSaTw5Y0Nvmw2P6hPwsCYSjhI9unJE7HhLA5GlLwbodL5uRf8wFDNjmlmP3lYbCZAKo94PDcsZPDlhxuOTGehpTMLDjVFwlBrQSQJ0LhEw3ciDpmm7W9E/HM3u+nrxOPQenYLONisE1SBc2KbF4xMWcqSjZw8J8HkUnCtcARxLedRmCuBopt6t+GdIHX2CggJiJRLPjtMrI9CzfxLuHHgaYDCu7k7A49Mk+5Y0/LE9Hg+qI+AoDukL0FXEoy2HwUCZ989E4+Gy/QUiZjma3q5WqeDh4QFf36EYrfZFOwlyozYemqDBuFY3Eb3NVvQ0JKJ7sxEPPglD18JRuL9AwLF3VQhT+sDLS3aB6J6dD06tTg3WiPdmzy2CIOiQ9kY2Vlc0Qj50KAaRvqeH+UAm9cCcJAoVmSNRMUPAWhuDhdEBmCIMAe/vjcAhUqSMHkZKRDe7tS5I5kb9KJ2joroem7e1QO6vwN7mS2houooZ9lzYY0Qcfj8YwnAZkoP9MCtCgawwObJC/JET6o8NySNwJFuFe2tZfGAVQAav0K121VvDsueKSmrQduo25uWWID4xFcdO3UTz8d+wte4nmEwpKE4KxnSdP1aYAtG9VAdn/kg4c0U4FwtwLOPhKOdwroSDIZi5/8xU8zSdEBNtxp5Dl3H8zB2YiTw3vxTHTt/C0ZM3UH/gCspr2hAdbYFBHYCxrw3E3RwBnQsFdBXy6ColcpL5lY95pIzjwKrZPLfaBUtRldmzP0Lj4ev47mwHRFGH8vW15Glu4Uj7DWzfdxk1W8+jcFUzouNskEokqJuuxIMyHs41HByVHJryeZjDOZD3uI4ovVxmN3I/v/25iz7FN42/oOXEbShVDDZu2Y/Wkzex78h1bK2/iIpNP6CovB1zCg8iMjYTMi8JZkbKUZAqIP51HiLHXCHDNZXo/t6aUqlnEycYsKTkS+z89lcEBtGo/KwRuw9dQ+3OS33Zl1WfxaLV3yO74CCS09dAMVwAMYFnmLm8Wh1BNP/+yWYoqorj9aTnFaR/vSAhJQgxjEXSpLeRZM2GyZKF0HALVEwofHx8yXxI+gKQWbnmVvQPqZslIsLUV4K84l0QtVHQGeKQmDIXcYmzYIzPQkxSDmIteYhPWQZzWgUJmAaOoavciv552qY8w523zSzFghVtmDBxHrShZuSXHcf8Za14b8lB2Oc1wJa5BYlvVmKcqQACJz4iNefciudDOml8sEbbZbOvRZq9EoMG+8M+v65PnJH9FVLtm5BgW48ocxFGBo8Bz9JL3VtfHDLe6RpevDs+IRtyBYVRoamwztyEpPRqjJ+0CuHGdyBqDL1k3RqyXOra9ZIIgqAngh2UkuqWSKQYFkB+hboYiIIeAsO0k66ZTJa98k/ek+f5ESMUCgs5n6ZWKtOefmV1Op236/b/hgED/gS5sI7jXTPfVgAAAABJRU5ErkJggg==";

    public override Guid ComponentGuid { get; } = new Guid("6d927349-cacd-4b97-85bc-ab97adba50e6");

    public override GH_Exposure Exposure { get; } = GH_Exposure.primary;

    public override bool Obsolete { get; } = false;

    public ProjectComponent_6d927349() : base(s_scriptData, s_scriptIconData,
        name: "MT_BooleanDifference",
        nickname: "MT_BD",
        description: "Boolean Difference but Multi-Threaded.",
        category: "UAP",
        subCategory: "UAP"
        )
    {
    }

    protected override void RegisterInputParams(GH_InputParamManager _) { }

    protected override void RegisterOutputParams(GH_OutputParamManager _) { }

    protected override void BeforeSolveInstance()
    {
      if (m_script is null) return;
      m_script.BeforeSolve(this);
    }

    protected override void SolveInstance(IGH_DataAccess DA)
    {
      if (m_script is null) return;
      m_script.Solve(this, DA);
    }

    protected override void AfterSolveInstance()
    {
      if (m_script is null) return;
      m_script.AfterSolve(this);
    }

    public override void RemovedFromDocument(GH_Document document)
    {
      ProjectComponentPlugin.DisposeScript(this, m_script);
      base.RemovedFromDocument(document);
    }

    public override BoundingBox ClippingBox
    {
      get
      {
        if (m_script is null) return BoundingBox.Empty;
        return m_script.GetClipBox(this);
      }
    }

    public override void DrawViewportWires(IGH_PreviewArgs args)
    {
      if (m_script is null) return;
      m_script.DrawWires(this, args);
    }

    public override void DrawViewportMeshes(IGH_PreviewArgs args)
    {
      if (m_script is null) return;
      m_script.DrawMeshes(this, args);
    }
  }
}
